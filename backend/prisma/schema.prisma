generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model app_status {
  app_status_id Int            @id @default(autoincrement())
  status        String         @db.VarChar(50)
  applications  applications[]
}

model applications {
  app_id            Int        @id @default(autoincrement())
  postulant_id      Int
  vacancy_id        Int
  app_status_id     Int
  motivation_letter String?
  applied_at        DateTime   @default(now()) @db.Timestamp(6)
  app_status        app_status @relation(fields: [app_status_id], references: [app_status_id], onDelete: NoAction, onUpdate: NoAction)
  users             users      @relation(fields: [postulant_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  vacancies         vacancies  @relation(fields: [vacancy_id], references: [vacancy_id], onDelete: NoAction, onUpdate: NoAction)
}

model class_projects {
  project_id Int
  class_id   String   @db.Char(6)
  classes    classes  @relation(fields: [class_id], references: [class_id], onDelete: NoAction, onUpdate: NoAction)
  projects   projects @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([project_id, class_id])
}

model classes {
  class_id       String           @id @db.Char(6)
  class_name     String           @db.VarChar(100)
  class_projects class_projects[]
}

model comments {
  comment_id        Int                 @id @default(autoincrement())
  user_id           Int
  content           String
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  is_visible        Boolean
  users             users               @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  comments_projects comments_projects[]
}

model comments_projects {
  comment_id Int
  project_id Int
  comments   comments @relation(fields: [comment_id], references: [comment_id], onDelete: NoAction, onUpdate: NoAction)
  projects   projects @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([comment_id, project_id])
}

model crew {
  project_id  Int
  user_id     Int
  role_id     Int
  assigned_at DateTime @default(now()) @db.Timestamp(6)
  projects    projects @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction)
  roles       roles    @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)
  users       users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([project_id, user_id, role_id])
}

model genres {
  genre_id       Int              @id @default(autoincrement())
  genre          String           @db.VarChar(50)
  project_genres project_genres[]
}

model interests {
  interest_id      Int                @id @default(autoincrement())
  interest_name    String             @db.VarChar(50)
  profile_interest profile_interest[]
}

model messages {
  message_id                        Int      @id @default(autoincrement())
  sender_id                         Int
  receiver_id                       Int
  content                           String   @db.VarChar(255)
  sent_at                           DateTime @default(now()) @db.Timestamp(6)
  is_read                           Boolean
  users_messages_receiver_idTousers users    @relation("messages_receiver_idTousers", fields: [receiver_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  users_messages_sender_idTousers   users    @relation("messages_sender_idTousers", fields: [sender_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model notifications {
  notif_id          Int                 @id @default(autoincrement())
  content           String
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  is_read           Boolean
  user_notification user_notification[]
}

model profile_interest {
  profile_id  Int
  interest_id Int
  interests   interests @relation(fields: [interest_id], references: [interest_id], onDelete: NoAction, onUpdate: NoAction)
  profiles    profiles  @relation(fields: [profile_id], references: [profile_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([profile_id, interest_id])
}

model profile_roles {
  profile_id Int
  role_id    Int
  profiles   profiles @relation(fields: [profile_id], references: [profile_id], onDelete: NoAction, onUpdate: NoAction)
  roles      roles    @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([profile_id, role_id])
}

model profiles {
  profile_id       Int                @id @default(autoincrement())
  user_id          Int                @unique
  experience       String?
  carreer          String?            @db.VarChar(255)
  bio              String?
  profile_image    String?            @db.VarChar(255)
  profile_interest profile_interest[]
  profile_roles    profile_roles[]
  users            users              @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model project_genres {
  project_id Int
  genre_id   Int
  genres     genres   @relation(fields: [genre_id], references: [genre_id], onDelete: NoAction, onUpdate: NoAction)
  projects   projects @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([project_id, genre_id])
}

model projects {
  project_id        Int                 @id @default(autoincrement())
  creator_id        Int
  title             String              @db.VarChar(200)
  banner            String?             @db.VarChar(255)
  description       String
  attachmenturl     String?             @db.VarChar(255)
  publication_date  DateTime            @default(now()) @db.Timestamp(6)
  budget            Decimal?            @db.Decimal(7, 2)
  sponsors          String?
  estimated_start   DateTime?           @db.Timestamp(6)
  estimated_end     DateTime?           @db.Timestamp(6)
  is_active         Boolean
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  is_published      Boolean
  format_id         Int?
  class_projects    class_projects[]
  comments_projects comments_projects[]
  crew              crew[]
  project_genres    project_genres[]
  project_formats   project_formats?    @relation(fields: [format_id], references: [format_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_projects_format")
  users             users               @relation(fields: [creator_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  user_notification user_notification[]
  vacancies         vacancies[]
}

model roles {
  role_id          Int             @id @default(autoincrement())
  role_name        String          @db.VarChar(50)
  responsibilities String
  department_id    Int
  crew             crew[]
  profile_roles    profile_roles[]
  departments      departments     @relation(fields: [department_id], references: [department_id], onDelete: NoAction, onUpdate: NoAction)
  vacancies        vacancies[]
}

model user_notification {
  user_id       Int
  project_id    Int
  notif_id      Int
  is_read       Boolean
  notifications notifications @relation(fields: [notif_id], references: [notif_id], onDelete: NoAction, onUpdate: NoAction)
  projects      projects      @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction)
  users         users         @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, project_id, notif_id])
}

model user_types {
  user_type_id Int     @id @default(autoincrement())
  type         String  @db.VarChar(50)
  users        users[]
}

model users {
  user_id                              Int                 @id @default(autoincrement())
  user_type_id                         Int
  first_name                           String              @db.VarChar(50)
  last_name                            String              @db.VarChar(50)
  email                                String              @unique @db.VarChar(150)
  password                             String              @db.VarChar(150)
  phone_num                            String?             @db.VarChar(12)
  registration_date                    DateTime            @default(now()) @db.Timestamp(6)
  is_active                            Boolean
  applications                         applications[]
  comments                             comments[]
  crew                                 crew[]
  messages_messages_receiver_idTousers messages[]          @relation("messages_receiver_idTousers")
  messages_messages_sender_idTousers   messages[]          @relation("messages_sender_idTousers")
  profiles                             profiles?
  projects                             projects[]
  user_notification                    user_notification[]
  user_types                           user_types          @relation(fields: [user_type_id], references: [user_type_id], onDelete: NoAction, onUpdate: NoAction)
}

model vacancies {
  vacancy_id   Int            @id @default(autoincrement())
  project_id   Int
  role_id      Int
  description  String
  requirements String
  is_filled    Boolean
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  is_visible   Boolean
  applications applications[]
  projects     projects       @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction)
  roles        roles          @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)
}

model project_formats {
  format_id   Int        @id @default(autoincrement())
  format_name String     @db.VarChar(50)
  projects    projects[]
}

model departments {
  department_id   Int     @id @default(autoincrement())
  department_name String  @db.VarChar(100)
  roles           roles[]
}
